services:
  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: biblioteca
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    networks:
      - private_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  componente1:
    build:
      context: ./componente1
    container_name: componente1
    expose:
      - "8080"  # ðŸš€ Expor apenas internamente, sem abrir portas externas
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/biblioteca
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    networks:
      - private_network  # ðŸš€ Permite comunicaÃ§Ã£o apenas dentro da rede privada

  componente2:
    build:
      context: ./componente2
    container_name: componente2
    ports:
      - "8081:8081"  # ðŸš€ Apenas o Componente 2 estÃ¡ acessÃ­vel externamente
    depends_on:
      - componente1
    environment:
      COMPONENTE1_URL: http://componente1:8080
    networks:
      - private_network  # ðŸš€ ComunicaÃ§Ã£o com o Componente 1
      - public_network   # ðŸš€ ComunicaÃ§Ã£o com o mundo externo

volumes:
  postgres_data:

networks:
  private_network:
    internal: true  # ðŸš€ MantÃ©m essa rede isolada do mundo externo
  public_network:
    driver: bridge  # ðŸš€ Permite acesso externo apenas ao Componente 2
